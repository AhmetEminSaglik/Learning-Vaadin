login page
signup page
---
home                                            |-------|
 - Meal List                                    | Sepet |
 - Profile                                      |-------|
 - Payments

---------------------------------------------------------------------------
Database:
user, address, meal, meal_price, payment, payment_method

User.db:
    + int id;
    + String firstName;
    + String lastName;
    + String username;
    + String password;
    + String email;
    + String phoneNo;
    - int id Address

Address.db:
    + int id;
    + String City
    + String Street

Meal.db:
    - int id;
    - String name
    - double price
    - String image
    - process

Meal_price.db
    - int id;
    - double price;
    - createdAt TIMESTAMP;  (last date is the preferred price)

Order.db
    + int id
    + Payment payment  //int payment_id (Foreign Key)
    + Address address
    - List meal_id
    - createdAt TIMESTAMP;

Payment.db
    + int id;
    + Order order                 // int order_id (Foreign Key)
    + double total;
    + PaymentMethod paymentMethod // int payment_method (Foreign Key)

Payment_method.db
    + int id;
    + String name;




------------------------------------
Her siparisin bir payment'i olmayabilir
Her payment'in bir siparisi olmak zorunda

Order.tbl'da payment_id colum'nu eklenir. ve payment verileri oraya kaydedilir
Payment null olabilir.

class Order {
        @OneToOne
        @JoinColumn(name = "payment_id")
        private Payment payment;
}


Payment.tbl'da order verisi gorunmez, Java bunu Order clasindaki payment referansi
ile verileri eslestirir.
public class Payment {
    // ...
    @OneToOne(mappedBy = "payment")
    private Order order;
    // ...
}


"İlişkinin sahibi, veritabanındaki foreign key'i içeren taraftır." dedin
burda, order.tbl'da payment_id'nin degerini icerdigi icin,
Order-Payment arasindaki iliskide, Order, Payment'in sahibi mi oluyor?